<!DOCTYPE html>
<html>
<head>
  <base href="/">
  <meta charset="UTF-8">

  <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no" />

  <!-- inject:polifill --><!-- endinject -->
  <script src="browser-error/browser-detect/browser-detect.umd.js"></script>
  <script>
    var thisBrowser = browserDetect();
    if (thisBrowser.name === 'ie') {
      window.location.replace("/browser-error.html");
    }
  </script>

  <script src="analytics.min.1604617444462.js"></script>

  <style>
    @-webkit-keyframes sk-scaleout {
      0% {
        -webkit-transform: scale(0)
      }
      100% {
        -webkit-transform: scale(1.0);
        opacity: 0;
      }
    }

    @keyframes sk-scaleout {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0);
      }
      100% {
        -webkit-transform: scale(1.0);
        transform: scale(1.0);
        opacity: 0;
      }
    }

    .main-animated-circle-loader {
      width: 100px;
      height: 100px;
      background-color: #333;
      border-radius: 100%;
      -webkit-animation: sk-scaleout 1.0s infinite ease-in-out;
      animation: sk-scaleout 1.0s infinite ease-in-out;
      position: absolute;
      top: 300px;
      left: 50%;
      margin-left: -50px;
      z-index: 20000;
    }
  </style>

  <script>

    function loadScript(src) {
      var script = document.createElement('script');
      script.src = src;
      document.getElementsByTagName('head')[0].appendChild(script);
    }

    function loadStyle(src) {
      var link  = document.createElement('link');
      link.rel  = 'stylesheet';
      link.type = 'text/css';
      link.href = src;
      link.media = 'all';
      document.getElementsByTagName('head')[0].appendChild(link);
    }

    function getCookie(name) {
      let matches = document.cookie.match(new RegExp(
        "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
      ));
      return matches ? decodeURIComponent(matches[1]) : undefined;
    }

    function setCookie(name, value) {
      document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
    }

    function loadDefaultWidget() {
      'style.1604617444462.css'.split(',').forEach(function(src) {
        loadStyle(src.trim());
      });
      '/css/application1604617436441.css,/css/vendor1604617436441.css'.split(',').forEach(function(src) {
        loadStyle(src.trim());
      });
      'bundle.1604617444462.js'.split(',').forEach(function(src) {
        loadScript(src.trim());
      });
    }

    (function() {

      if (!true || !window.analytics) {
        loadDefaultWidget();
        return;
      }



      window.analytics.init(
        {
          name: 'windget',
          type: 'web',
          version: '1.0.0'
        },
        {
          debug: true,
          omitStorage: true,
          omitTransport: true,
          websocketUrl: '',
          httpUrl: '',
          enableGeolocation: false
        }
      );

      var bookformId  = (document.location.hostname.split('.')[0].split('-')[0].match(/\d+/) || [])[0] || 1;


      var bookform = new Promise(function(resolve, reject) {
        var XHR = 'onload' in new XMLHttpRequest() ? XMLHttpRequest : XDomainRequest;
        var xhr = new XHR();
        var url = '/api/v1/bookform/' + bookformId + '/';
        xhr.open('GET', url);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.setRequestHeader('authorization', 'Bearer yusw3yeu6hrr4r9j3gw6');
        xhr.send();
        xhr.onloadend = () => {
          try {
            resolve(JSON.parse(xhr.responseText));
          } catch (e) {
            reject(new Error('[bookformId:' + bookformId + '] Bookform response parse error: ' + e.message));
          }
        };

        xhr.onerror = (e) => {
          reject(new Error('[bookformId:' + bookformId + '] Error while fetch bookform: ' + e.message));
        };

        xhr.ontimeout = () => {
          xhr.abort();
          reject(new Error('[bookformId:' + bookformId + '] XHR bookform request timeout.'));
        };

        xhr.onabort = () => {
          reject(new Error('[bookformId:' + bookformId + '] Bookform request was aborted.'));
        };
      });

      var abData = new Promise(function(resolve, reject) {

        window.analytics.getUserIdentify();

        var abGroup = window.analytics.getAb();

        resolve({
          abGroup: abGroup
        });

      });

      Promise.all([
        bookform,
        abData
      ]).then(function(results) {
        var bookform = results[0];
        var ab = results[1];
        var isVk = location.host === 'vk.yclients.com';
        var isOk = location.host === 'n001.yclients.com';

        window.__yBookform__ = bookform;



        if (isVk || isOk || !bookform.ab_test_enabled || typeof ab.abGroup !== 'number' || typeof bookform.ab_test_percentage !== 'number') {
          loadDefaultWidget();
        } else if(ab.abGroup >= bookform.ab_test_percentage) {
          document.location.replace('https://b[d].yclients.com'.replace('[d]', bookformId));
        } else {

          window.__ab__ = {
            group: ab.abGroup
          };

          loadDefaultWidget();
        }
      })
      .catch(function() {
        loadDefaultWidget();
      });
    })();

  </script>

  <!-- inject:polifill --><!-- endinject -->
  <title></title>
  <link rel="shortcut icon" href="" type="image/x-icon" id="favico">
</head>
<head-configurator></head-configurator>
<body class="h100  ios"
      ng-class="{
        'without-header' : $root.ySettings.style.show_header === false,
        'footer-link':  $root.ySettings.hide_yclients_link !== true
      }">


<div class="main-animated-circle-loader">
</div>

<yclients class="h100 js-for-copy y-content-wrapper"></yclients>

<noscript>
  <div><img src="https://mc.yandex.ru/watch/35239280" style="position:absolute; left:-9999px;" alt=""/></div>
</noscript>

<y-backdrop></y-backdrop>
<y-top-notification></y-top-notification>
<y-request-rating></y-request-rating>

</body>
</html>
